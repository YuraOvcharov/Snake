let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");const width=500,height=500;let score=0,checkCollisionIndicator=!0;canvas.width=width,canvas.height=height;const blockSize=10;let widthInBlocks=width/blockSize,heightInBlocks=height/blockSize,menu=()=>{ctx.clearRect(0,0,width,height),ctx.fillStyle="Black",ctx.fillRect(0,0,width,height),ctx.font="30px serif",ctx.fillStyle="White",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText("Start game",width/2,height/2),ctx.font="15px serif",ctx.fillText("press space",width/2,height/2+20)},drawBorder=()=>{ctx.fillStyle="Gray",ctx.fillRect(0,0,width,blockSize),ctx.fillRect(0,height-blockSize,width,blockSize),ctx.fillRect(0,0,blockSize,height),ctx.fillRect(width-blockSize,0,blockSize,height)},drawScore=()=>{ctx.font="20px Courier",ctx.fillStyle="Black",ctx.textAlign="left",ctx.textBaseline="top",ctx.fillText("Счет: "+score,blockSize,blockSize)},gameOver=()=>{clearTimeout(timeoutId),ctx.font="30px Courier",ctx.fillStyle="Black",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText("Конец игры",width/2,height/2)},circle=(t,e,i,o)=>{ctx.beginPath(),ctx.arc(t,e,i,0,2*Math.PI),o?ctx.fill():ctx.stroke()};class Block{constructor(t,e){this.col=t,this.row=e}drawSquare(t){let e=this.col*blockSize,i=this.row*blockSize;ctx.fillStyle=t,ctx.fillRect(e,i,blockSize,blockSize)}drawCircle(t){let e=this.col*blockSize+blockSize/2,i=this.row*blockSize+blockSize/2;ctx.fillStyle=t,circle(e,i,blockSize/2,!0)}equal(t){return this.col===t.col&&this.row===t.row}}class Snake{constructor(){this.segments=[new Block(3,1),new Block(2,1),new Block(1,1)],this.direction="right",this.nextDirection="right"}draw(){this.segments[0].drawSquare("Red");for(let t=1;t<this.segments.length;t++)t%2?this.segments[t].drawSquare("yellow"):this.segments[t].drawSquare("blue")}move(){let t,e=this.segments[0];this.direction=this.nextDirection,"right"==this.direction?t=new Block(e.col+1,e.row):"down"==this.direction?t=new Block(e.col,e.row+1):"left"==this.direction?t=new Block(e.col-1,e.row):"up"==this.direction&&(t=new Block(e.col,e.row-1)),this.checkCollision(t)?checkCollisionIndicator=!1:(this.segments.unshift(t),t.equal(apple.position)?(score+=1,apple.move()):this.segments.pop())}checkCollision(t){let e=0===t.col,i=0===t.row,o=t.col===widthInBlocks-1,l=t.row===heightInBlocks-1,c=e||i||o||l,n=!1;for(let e of this.segments)t.equal(e)&&(n=!0);return c||n}setDirection(t){"up"===this.direction&&"down"===t||"right"===this.direction&&"left"===t||"down"===this.direction&&"up"===t||"left"===this.direction&&"right"===t||(this.nextDirection=t)}}class Apple{constructor(){this.position=new Block(widthInBlocks/2,heightInBlocks/2)}draw(){this.position.drawCircle("LimeGreen")}move(){let t=Math.floor(Math.random()*(widthInBlocks-2)+1),e=Math.floor(Math.random()*(heightInBlocks-2)+1),i=0;for(;i<snake.segments.length;)snake.segments[i].col===t&&snake.segments[i].row===e?(t=Math.floor(Math.random()*(widthInBlocks-2)+1),e=Math.floor(Math.random()*(heightInBlocks-2)+1),i=0):i+=1;this.position=new Block(t,e)}}let snake=new Snake,apple=new Apple,direction={37:"left",38:"up",39:"right",40:"down"};$("body").keydown(function(t){let e=direction[t.keyCode];void 0!==e&&snake.setDirection(e),32===t.keyCode&&startDrawGame()});let animationTime=100,levelOfComplexity=2*score;function startDrawGame(){setTimeout(function t(){ctx.clearRect(0,0,width,height),drawScore(),snake.move(),snake.draw(),apple.draw(),drawBorder(),checkCollisionIndicator?setTimeout(t,animationTime-levelOfComplexity):gameOver()},100)}menu();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

let canvas=document.getElementById("canvas"),ctx=canvas.getContext("2d");const width=500,height=500;let score=0,checkCollisionIndicator=!0;canvas.width=500,canvas.height=500;const blockSize=10;let widthInBlocks=500/blockSize,heightInBlocks=500/blockSize,drawBorder=function(){ctx.fillStyle="Gray",ctx.fillRect(0,0,500,blockSize),ctx.fillRect(0,500-blockSize,500,blockSize),ctx.fillRect(0,0,blockSize,500),ctx.fillRect(500-blockSize,0,blockSize,500)},drawScore=function(){ctx.font="20px Courier",ctx.fillStyle="Black",ctx.textAlign="left",ctx.textBaseline="top",ctx.fillText("Счет: "+score,blockSize,blockSize)},gameOver=()=>{clearTimeout(timeoutId),ctx.font="30px Courier",ctx.fillStyle="Black",ctx.textAlign="center",ctx.textBaseline="middle",ctx.fillText("Конец игры",250,250)},circle=(e,t,i,o)=>{ctx.beginPath(),ctx.arc(e,t,i,0,2*Math.PI),o?ctx.fill():ctx.stroke()};class Block{constructor(e,t){this.col=e,this.row=t}drawSquare(e){let t=this.col*blockSize,i=this.row*blockSize;ctx.fillStyle=e,ctx.fillRect(t,i,blockSize,blockSize)}drawCircle(e){let t=this.col*blockSize+blockSize/2,i=this.row*blockSize+blockSize/2;ctx.fillStyle=e,circle(t,i,blockSize/2,!0)}equal(e){return this.col===e.col&&this.row===e.row}}class Snake{constructor(){this.segments=[new Block(3,1),new Block(2,1),new Block(1,1)],this.direction="right",this.nextDirection="right"}draw(){this.segments[0].drawSquare("Red");for(let e=1;e<this.segments.length;e++)e%2?this.segments[e].drawSquare("yellow"):this.segments[e].drawSquare("blue")}move(){let e,t=this.segments[0];this.direction=this.nextDirection,"right"==this.direction?e=new Block(t.col+1,t.row):"down"==this.direction?e=new Block(t.col,t.row+1):"left"==this.direction?e=new Block(t.col-1,t.row):"up"==this.direction&&(e=new Block(t.col,t.row-1)),this.checkCollision(e)?checkCollisionIndicator=!1:(this.segments.unshift(e),e.equal(apple.position)?(score+=1,apple.move()):this.segments.pop())}checkCollision(e){let t=0===e.col,i=0===e.row,o=e.col===widthInBlocks-1,l=e.row===heightInBlocks-1,c=t||i||o||l,n=!1;for(let t of this.segments)e.equal(t)&&(n=!0);return c||n}setDirection(e){"up"===this.direction&&"down"===e||"right"===this.direction&&"left"===e||"down"===this.direction&&"up"===e||"left"===this.direction&&"right"===e||(this.nextDirection=e)}}class Apple{constructor(){this.position=new Block(widthInBlocks/2,heightInBlocks/2)}draw(){this.position.drawCircle("LimeGreen")}move(){let e=Math.floor(Math.random()*(widthInBlocks-2)+1),t=Math.floor(Math.random()*(heightInBlocks-2)+1),i=0;for(;i<snake.segments.length;)snake.segments[i].col===e&&snake.segments[i].row===t?(e=Math.floor(Math.random()*(widthInBlocks-2)+1),t=Math.floor(Math.random()*(heightInBlocks-2)+1),i=0):i+=1;this.position=new Block(e,t)}}let snake=new Snake,apple=new Apple,direction={37:"left",38:"up",39:"right",40:"down"};$("body").keydown(function(e){let t=direction[e.keyCode];void 0!==t&&snake.setDirection(t)});let animationTime=100,levelOfComplexity=2*score,timeoutId=setTimeout(function e(){ctx.clearRect(0,0,500,500),drawScore(),snake.move(),snake.draw(),apple.draw(),drawBorder(),checkCollisionIndicator?setTimeout(e,animationTime-levelOfComplexity):gameOver()},100);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
